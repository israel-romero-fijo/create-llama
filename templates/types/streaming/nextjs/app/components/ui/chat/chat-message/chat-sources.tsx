import { Check, Copy } from "lucide-react";
import { useMemo } from "react";
import { Button } from "../../button";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "../../hover-card";
import { useCopyToClipboard } from "../hooks/use-copy-to-clipboard";
import { SourceData, SourceNode } from "../index";
import PdfDialog from "../widgets/PdfDialog";

function SourceNumberButton({ index }: { index: number }) {
  return (
    <div className="text-xs w-5 h-5 rounded-full bg-gray-100 mb-2 flex items-center justify-center hover:text-white hover:bg-primary hover:cursor-pointer">
      {index + 1}
    </div>
  );
}

type NodeInfo = {
  id: string;
  url?: string;
};

type Citation = {
  order: number;
  id: string;
  display: string;
  node?: SourceNode;
};

function extractCitations(text: string): Citation[] {
  // Define the regular expression to match the references
  const referenceRegex = /\[(\d+)\]:\s+(.+)\s+'(.+)'/g;
  const citations: Citation[] = [];
  let match;

  // Find all the references in the text
  while ((match = referenceRegex.exec(text)) !== null) {
    citations.push({
      order: parseInt(match[1], 10),
      id: match[2],
      display: match[3],
    });
  }

  return citations;
}

export function ChatSources({
  data,
  messageContent,
}: {
  data: SourceData;
  messageContent: string;
}) {
  const sources: NodeInfo[] = useMemo(() => {
    const nodesByPath: { [path: string]: NodeInfo } = {};
    const citations = extractCitations(messageContent);

    // Map citations to nodes
    citations
      .map((citation) => {
        const node = data.nodes.find((node) => node.id === citation.id);
        citation.node = node;
        return citation;
      })
      .sort((a, b) => (a.order ?? 1) - (b.order ?? 1))
      .filter((citation) => citation.node !== undefined)
      .forEach((citation) => {
        const nodeInfo = citation.node;
        const key = nodeInfo?.url ?? nodeInfo?.id; // use id as key for UNKNOWN type
        if (key !== undefined && !nodesByPath[key]) {
          nodesByPath[key + `:${citation.order}`] = nodeInfo;
        }
      });

    return Object.values(nodesByPath);
  }, [data.nodes]);

  if (sources.length === 0) return null;

  return (
    <div className="space-x-2 text-sm">
      <span className="font-semibold">Sources:</span>
      <div className="inline-flex gap-1 items-center">
        {sources.map((nodeInfo: NodeInfo, index: number) => {
          if (nodeInfo.url?.endsWith(".pdf")) {
            return (
              <PdfDialog
                key={nodeInfo.id}
                documentId={nodeInfo.id}
                url={nodeInfo.url!}
                trigger={<SourceNumberButton index={index} />}
              />
            );
          }
          return (
            <div key={nodeInfo.id}>
              <HoverCard>
                <HoverCardTrigger>
                  <SourceNumberButton index={index} />
                </HoverCardTrigger>
                <HoverCardContent className="w-[320px]">
                  <NodeInfo nodeInfo={nodeInfo} />
                </HoverCardContent>
              </HoverCard>
            </div>
          );
        })}
      </div>
    </div>
  );
}

function NodeInfo({ nodeInfo }: { nodeInfo: NodeInfo }) {
  const { isCopied, copyToClipboard } = useCopyToClipboard({ timeout: 1000 });

  if (nodeInfo.url) {
    // this is a node generated by the web loader or file loader,
    // add a link to view its URL and a button to copy the URL to the clipboard
    return (
      <div className="flex items-center my-2">
        <a
          className="hover:text-blue-900 truncate"
          href={nodeInfo.url}
          target="_blank"
        >
          <span>{nodeInfo.url}</span>
        </a>
        <Button
          onClick={() => copyToClipboard(nodeInfo.url!)}
          size="icon"
          variant="ghost"
          className="h-12 w-12 shrink-0"
        >
          {isCopied ? (
            <Check className="h-4 w-4" />
          ) : (
            <Copy className="h-4 w-4" />
          )}
        </Button>
      </div>
    );
  }

  // node generated by unknown loader, implement renderer by analyzing logged out metadata
  return (
    <p>
      Sorry, unknown node type. Please add a new renderer in the NodeInfo
      component.
    </p>
  );
}
